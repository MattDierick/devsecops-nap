apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input {
      syslog {
        port => 5044
        tags => [waf]
      }
      syslog {
        port => 5045
        tags => [f5xc]
      }
    }
    filter {
      if "waf" in [tags] {
        grok {
          match => {
            "message" => [
              ",attack_type=\"%{DATA:attack_type}\"",
              ",blocking_exception_reason=\"%{DATA:blocking_exception_reason}\"",
              ",bot_anomalies=\"%{DATA:bot_anomalies}\"",
              ",bot_category=\"%{DATA:bot_category}\"",
              ",bot_signature_name=\"%{DATA:bot_signature_name}\"",
              ",client_application=\"%{DATA:client_application}\"",
              ",client_application_version=\"%{DATA:client_application_version}\"",
              ",client_class=\"%{DATA:client_class}\"",
              ",date_time=\"%{DATA:date_time}\"",
              ",dest_port=\"%{DATA:dest_port}\"",
              ",enforced_bot_anomalies=\"%{DATA:enforced_bot_anomalies}\"",
              ",grpc_method=\"%{DATA:grpc_method}\"",
              ",grpc_service=\"%{DATA:grpc_service}\"",
              ",ip_client=\"%{DATA:ip_client}\"",
              ",is_truncated=\"%{DATA:is_truncated}\"",
              ",method=\"%{DATA:method}\"",
              ",outcome=\"%{DATA:outcome}\"",
              ",outcome_reason=\"%{DATA:outcome_reason}\"",
              ",policy_name=\"%{DATA:policy_name}\"",
              ",protocol=\"%{DATA:protocol}\"",
              ",request_status=\"%{DATA:request_status}\"",
              ",request=\"%{DATA:request}\"",
              ",request_body_base64=\"%{DATA:request_body_base64}\"",
              ",response_code=\"%{DATA:response_code}\"",
              ",severity=\"%{DATA:severity}\"",
              ",sig_cves=\"%{DATA:sig_cves}\"",
              ",sig_ids=\"%{DATA:sig_ids}\"",
              ",sig_names=\"%{DATA:sig_names}\"",
              ",sig_set_names=\"%{DATA:sig_set_names}\"",
              ",src_port=\"%{DATA:src_port}\"",
              ",staged_sig_cves=\"%{DATA:staged_sig_cves}\"",
              ",staged_sig_ids=\"%{DATA:staged_sig_ids}\"",
              ",staged_sig_names=\"%{DATA:staged_sig_names}\"",
              ",staged_threat_campaign_names=\"%{DATA:staged_threat_campaign_names}\"",
              ",sub_violations=\"%{DATA:sub_violations}\"",
              ",support_id=\"%{DATA:support_id}\"",
              ",threat_campaign_names=\"%{DATA:threat_campaign_names}\"",
              ",unit_hostname=\"%{DATA:unit_hostname}\"",
              ",uri=\"%{DATA:uri}\"",
              ",violations=\"%{DATA:violations}\"",
              ",violation_details=\"%{DATA:violation_details_xml}\"",
              ",violation_rating=\"%{DATA:violation_rating}\"",
              ",vs_name=\"%{DATA:vs_name}\"",
              ",x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\""
            ]
          }
          break_on_match => false
        }
        if [violation_details_xml] != "N/A" {
          xml {
            source => "violation_details_xml"
            target => "violation_details"
          }
        }
        mutate {
          split => { "attack_type" => "," }
          split => { "sig_cves" => "," }
          split => { "sig_ids" => "," }
          split => { "sig_names" => "," }
          split => { "sig_set_names" => "," }
          split => { "staged_sig_cves" => "," }
          split => { "staged_sig_ids" => "," }
          split => { "staged_sig_names" => "," }
          split => { "staged_threat_campaign_names" => "," }
          split => { "sub_violations" => "," }
          split => { "threat_campaign_names" => "," }
          split => { "violations" => "," }
          remove_field => [
            "[violation_details][violation_masks]",
            "violation_details_xml",
            "message"
          ]
        }
        if [bot_category] == "N/A" {
          mutate { replace => { "bot_category" => "Non-BOT"}}
        }
        if [response_code] == "0" {
          mutate { replace => { "response_code" => "Blocked"}}
        }
        if [x_forwarded_for_header_value] != "N/A" {
          mutate { add_field => { "source_host" => "%{x_forwarded_for_header_value}"}}
        } else {
          mutate { add_field => { "source_host" => "%{ip_client}"}}
        }
        geoip {
          source => "source_host"
        }
      }
      else if "f5xc" in [tags] {
        grok {
          match => {
            "message" => [
              "app=\"%{DATA:app}\"",
              ";bot_classification=\"%{DATA:bot_classification}\"",
              ";bot_verification_failed=\"%{DATA:bot_verification_failed}\"",
              ";browser_type=\"%{DATA:browser_type}\"",
              ";description=\"%{DATA:description}\"",
              ";environment=\"%{DATA:environment}\"",
              ";gateway=\"%{DATA:gateway}\"",
              ";http.hostname=\"%{DATA:http.hostname}\"",
              ";http.remote_addr=\"%{DATA:http.remote_addr}\"",
              ";http.remote_port=\"%{DATA:http.remote_port}\"",
              ";http.request_method=\"%{DATA:http.request_method}\"",
              ";http.response_code=\"%{DATA:http.response_code}\"",
              ";http.server_addr=\"%{DATA:http.server_addr}\"",
              ";http.server_port=\"%{DATA:http.server_port}\"",
              ";http.uri=\"%{DATA:http.uri}\"",
              ";is_truncated=\"%{DATA:is_truncated}\"",
              ";level=\"%{DATA:level}\"",
              ";policy_name=\"%{DATA:policy_name}\"",
              ";request=\"%{DATA:request}\"",
              ";request_outcome=\"%{DATA:request_outcome}\"",
              ";request_outcome_reason=\"%{DATA:request_outcome_reason}\"",
              ";signature_cves=\"%{DATA:ignature_cves}\"",
              ";signature_ids=\"%{DATA:signature_ids}\"",
              ";signature_names=\"%{DATA:signature_names}\"",
              ";sub_violations=\"%{DATA:sub_violations}\"",
              ";support_id=\"%{DATA:support_id}\"",
              ";type=\"%{DATA:type}\"",
              ";version=\"%{DATA:version}\"",
              ";violation_rating=\"%{DATA:violation_rating}\"",
              ";violations=\"%{DATA:violations}\"",
              ";x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\"",
              ";event_host=\"%{DATA:event_host}\"",
              ";event_source=\"%{DATA:event_source}\"",
              ";event_sourcetype=\"%{DATA:event_sourcetype}\"",
              ";event_time=\"%{DATA:event_time}\""
            ]
          }
          break_on_match => false
        }
        geoip {
          source => "source_host"
        }
      }
    }
    output {
      if "waf" in [tags] {
        elasticsearch {
          index => "waf-logs-%{+YYY.MM.dd}"
          hosts => [ "${ES_HOSTS}" ]
          user => "${ES_USER}"
          password => "${ES_PASSWORD}"
          cacert => '/etc/logstash/certificates/ca.crt'
        }
      }
      else if "f5xc" in [tags] {
        elasticsearch {
          index => "waf-f5xc-%{+YYY.MM.dd}"
          hosts => [ "${ES_HOSTS}" ]
          user => "${ES_USER}"
          password => "${ES_PASSWORD}"
          cacert => '/etc/logstash/certificates/ca.crt'
        }
      }
    }
